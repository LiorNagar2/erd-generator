#!/usr/bin/env nodeconst { Command } = require("commander");const ParserFactory = require("./parsers/ParserFactory");const DiagramGenerator = require("./diagram/DiagramGenerator");const path = require("path");const fs = require('fs');const program = new Command();program    .requiredOption("--type <type>", "Specify the ORM type (sequelize|mongoose)")    .option("--dialect <dialect>", "Specify relational database type, required when --type=sequelize (mysql|postgres)")    .requiredOption("--dbHost <host>", "Database host")    .option("--dbUser <user>", "Database username (required for sequelize)")    .option("--dbPassword <password>", "Database password (required for sequelize)")    .requiredOption("--dbName <name>", "Database name")    .option("--outputDir <path>", "Path to the output directory", "./erd")    .option("--format <format>", "Output format (svg|png|md)", "svg");async function main() {    program.parse();    const options = program.opts();    //console.log("Parsed options:", options);    const { type, dialect, dbHost, dbUser, dbPassword, dbName, outputDir, format,  } = options;    // Validate input parameters    if (!type || !dbHost || !dbName) {        console.error("Error: Database type, host, and name are required.");        process.exit(1);    }    // if (type === "sequelize" && (!dbUser || !dbPassword)) {    //     console.error("Error: For Sequelize, dbUser and dbPassword are required.");    //     process.exit(1);    // }    if (type === "sequelize" && !dialect) {        console.error("Error: For Sequelize, dialect is required.");        process.exit(1);    }    try {        // Create the parser instance based on the type        const parser = ParserFactory.getParser(type, {            dialect,            dbHost,            dbUser,            dbPassword,            dbName,        });        // Parse the models or schema        const models = await parser.parse();        const outputPath = path.resolve(outputDir, `${dbName}.ERD.${format}`);        if (!fs.existsSync(outputDir)) {            fs.mkdirSync(outputDir, { recursive: true });        }        const generator = new DiagramGenerator(outputPath);        // Generate the diagram or markdown        if (format === "md") {            generator.generateMarkdown(models);        } else {            generator.generateDiagram(models, format);        }        console.log(`ERD successfully generated at ${outputPath}`);    } catch (error) {        console.error("Error:", error.message);        process.exit(1);    }}// Run the main functionmain();/** * Example Usage: * * For Sequelize with MySQL: * erd-gen --type sequelize --dialect mysql --dbHost localhost --dbUser root --dbPassword password --dbName mydb --outputDir ./erd --format svg * * For Sequelize with Postgres: * erd-gen --type sequelize --dialect postgres --dbHost localhost --dbUser root --dbPassword password --dbName mydb --outputDir ./erd --format svg * * For Mongoose (without dialect): * erd-gen --type mongoose --dbHost localhost --dbName mydb --outputDir ./erd --format svg */